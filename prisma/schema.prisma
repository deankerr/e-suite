// https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  workbench Json     @default("{}")

  accounts Account[]
  agents   Agent[]
}

model Agent {
  id        String   @id @default(cuid())
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name  String @default("Untitled")
  image String @default("")

  engine     Engine @relation(fields: [engineId], references: [id])
  engineId   String
  parameters Json   @default("{}")
}

model Engine {
  id    String @id
  model String
  type  String

  provider        Provider @relation(fields: [providerId], references: [id])
  providerId      String
  providerModelId String

  displayName String
  creator     String

  costInputNanoUSD  Int
  costOutputNanoUSD Int

  description   String?
  url           String?
  license       String?
  parameterSize String?
  contextLength String?

  tokenizer        String?
  instructType     String?
  promptFormat     String?
  stopTokens       String[] @default([])
  outputTokenLimit String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  available Boolean  @default(true)
  comment   String[] @default([])

  Agent Agent[]
}

model Provider {
  id          String   @id // openai | openrouter | togetherai
  displayName String
  url         String
  engines     Engine[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
