// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Engine {
  id                      String   @id
  type                    String // chat | completion | image ?
  model                   String // should link same model from different hosts
  host                    Host     @relation(fields: [hostId], references: [id])
  hostId                  String
  // info
  displayName             String
  creatorName             String
  releaseDate             DateTime
  description             String
  url                     String
  license                 String
  licenseUrl              String
  // specs
  contextLength           Int
  parameterSize           String // 7 | 13 | 70 etc billion
  promptFormat            String
  stopTokens              String // string[]
  // host
  hostMaxCompletionTokens Int // host imposed maximum, same as contextLength if no limit
  priceInput              String // USD per 1k tokens
  priceOutput             String // can be Infinity/E notation etc.

  includeParameters String // {model: 'gpt-4', stream: true} etc
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Host {
  id          String   @id // openai | openrouter | togetherai
  displayName String
  url         String
  engines     Engine[]
}
