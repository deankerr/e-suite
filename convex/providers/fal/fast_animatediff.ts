/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from 'zod'

/**
 * @summary Turbo Video To Video
 */
export const turboVideoToVideoTurboVideoToVideoPostBodyFirstNSecondsMin = 2

export const turboVideoToVideoTurboVideoToVideoPostBodyFirstNSecondsMax = 12
export const turboVideoToVideoTurboVideoToVideoPostBodyFpsMax = 16
export const turboVideoToVideoTurboVideoToVideoPostBodyStrengthMin = 0.1

export const turboVideoToVideoTurboVideoToVideoPostBodyStrengthMax = 1
export const turboVideoToVideoTurboVideoToVideoPostBodyGuidanceScaleMin = 0

export const turboVideoToVideoTurboVideoToVideoPostBodyGuidanceScaleMax = 20
export const turboVideoToVideoTurboVideoToVideoPostBodyNumInferenceStepsMax = 32

export const turboVideoToVideoTurboVideoToVideoPostBody = zod.object({
  prompt: zod.string(),
  video_url: zod.string(),
  first_n_seconds: zod
    .number()
    .min(turboVideoToVideoTurboVideoToVideoPostBodyFirstNSecondsMin)
    .max(turboVideoToVideoTurboVideoToVideoPostBodyFirstNSecondsMax)
    .optional(),
  fps: zod.number().min(1).max(turboVideoToVideoTurboVideoToVideoPostBodyFpsMax).optional(),
  strength: zod
    .number()
    .min(turboVideoToVideoTurboVideoToVideoPostBodyStrengthMin)
    .max(turboVideoToVideoTurboVideoToVideoPostBodyStrengthMax)
    .optional(),
  guidance_scale: zod
    .number()
    .min(turboVideoToVideoTurboVideoToVideoPostBodyGuidanceScaleMin)
    .max(turboVideoToVideoTurboVideoToVideoPostBodyGuidanceScaleMax)
    .optional(),
  num_inference_steps: zod
    .number()
    .min(1)
    .max(turboVideoToVideoTurboVideoToVideoPostBodyNumInferenceStepsMax)
    .optional(),
  seed: zod.number().optional(),
  negative_prompt: zod.string().optional(),
  motions: zod
    .array(zod.enum(['zoom-out', 'zoom-in', 'pan-left', 'pan-right', 'tilt-up', 'tilt-down']))
    .optional(),
})

export const turboVideoToVideoTurboVideoToVideoPostResponse = zod.object({
  seed: zod.number(),
  video: zod.object({
    file_size: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    url: zod.string(),
  }),
})

/**
 * @summary Regular Text To Video
 */
export const regularTextToVideoTextToVideoPostBodyFpsMax = 16
export const regularTextToVideoTextToVideoPostBodyVideoSizeHeightMin = 0

export const regularTextToVideoTextToVideoPostBodyVideoSizeHeightMax = 14142
export const regularTextToVideoTextToVideoPostBodyVideoSizeWidthMin = 0

export const regularTextToVideoTextToVideoPostBodyVideoSizeWidthMax = 14142
export const regularTextToVideoTextToVideoPostBodyGuidanceScaleMin = 0

export const regularTextToVideoTextToVideoPostBodyGuidanceScaleMax = 20
export const regularTextToVideoTextToVideoPostBodyNumFramesMax = 32
export const regularTextToVideoTextToVideoPostBodyNumInferenceStepsMax = 50

export const regularTextToVideoTextToVideoPostBody = zod.object({
  prompt: zod.string(),
  seed: zod.number().optional(),
  fps: zod.number().min(1).max(regularTextToVideoTextToVideoPostBodyFpsMax).optional(),
  video_size: zod
    .object({
      height: zod
        .number()
        .min(regularTextToVideoTextToVideoPostBodyVideoSizeHeightMin)
        .max(regularTextToVideoTextToVideoPostBodyVideoSizeHeightMax)
        .optional(),
      width: zod
        .number()
        .min(regularTextToVideoTextToVideoPostBodyVideoSizeWidthMin)
        .max(regularTextToVideoTextToVideoPostBodyVideoSizeWidthMax)
        .optional(),
    })
    .or(
      zod.enum([
        'square_hd',
        'square',
        'portrait_4_3',
        'portrait_16_9',
        'landscape_4_3',
        'landscape_16_9',
      ]),
    )
    .optional(),
  guidance_scale: zod
    .number()
    .min(regularTextToVideoTextToVideoPostBodyGuidanceScaleMin)
    .max(regularTextToVideoTextToVideoPostBodyGuidanceScaleMax)
    .optional(),
  num_frames: zod.number().min(1).max(regularTextToVideoTextToVideoPostBodyNumFramesMax).optional(),
  num_inference_steps: zod
    .number()
    .min(1)
    .max(regularTextToVideoTextToVideoPostBodyNumInferenceStepsMax)
    .optional(),
  negative_prompt: zod.string().optional(),
  motions: zod
    .array(zod.enum(['zoom-out', 'zoom-in', 'pan-left', 'pan-right', 'tilt-up', 'tilt-down']))
    .optional(),
})

export const regularTextToVideoTextToVideoPostResponse = zod.object({
  seed: zod.number(),
  video: zod.object({
    file_size: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    url: zod.string(),
  }),
})

/**
 * @summary Regular Video To Video
 */
export const regularVideoToVideoVideoToVideoPostBodyFirstNSecondsMin = 2

export const regularVideoToVideoVideoToVideoPostBodyFirstNSecondsMax = 4
export const regularVideoToVideoVideoToVideoPostBodyFpsMax = 16
export const regularVideoToVideoVideoToVideoPostBodyStrengthMin = 0.1

export const regularVideoToVideoVideoToVideoPostBodyStrengthMax = 1
export const regularVideoToVideoVideoToVideoPostBodyGuidanceScaleMin = 0

export const regularVideoToVideoVideoToVideoPostBodyGuidanceScaleMax = 20
export const regularVideoToVideoVideoToVideoPostBodyNumInferenceStepsMax = 50

export const regularVideoToVideoVideoToVideoPostBody = zod.object({
  prompt: zod.string(),
  video_url: zod.string(),
  first_n_seconds: zod
    .number()
    .min(regularVideoToVideoVideoToVideoPostBodyFirstNSecondsMin)
    .max(regularVideoToVideoVideoToVideoPostBodyFirstNSecondsMax)
    .optional(),
  fps: zod.number().min(1).max(regularVideoToVideoVideoToVideoPostBodyFpsMax).optional(),
  strength: zod
    .number()
    .min(regularVideoToVideoVideoToVideoPostBodyStrengthMin)
    .max(regularVideoToVideoVideoToVideoPostBodyStrengthMax)
    .optional(),
  guidance_scale: zod
    .number()
    .min(regularVideoToVideoVideoToVideoPostBodyGuidanceScaleMin)
    .max(regularVideoToVideoVideoToVideoPostBodyGuidanceScaleMax)
    .optional(),
  num_inference_steps: zod
    .number()
    .min(1)
    .max(regularVideoToVideoVideoToVideoPostBodyNumInferenceStepsMax)
    .optional(),
  seed: zod.number().optional(),
  negative_prompt: zod.string().optional(),
  motions: zod
    .array(zod.enum(['zoom-out', 'zoom-in', 'pan-left', 'pan-right', 'tilt-up', 'tilt-down']))
    .optional(),
})

export const regularVideoToVideoVideoToVideoPostResponse = zod.object({
  seed: zod.number(),
  video: zod.object({
    file_size: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    url: zod.string(),
  }),
})

/**
 * @summary Turbo Text To Video
 */
export const turboTextToVideoTurboTextToVideoPostBodyFpsMax = 16
export const turboTextToVideoTurboTextToVideoPostBodyVideoSizeHeightMin = 0

export const turboTextToVideoTurboTextToVideoPostBodyVideoSizeHeightMax = 14142
export const turboTextToVideoTurboTextToVideoPostBodyVideoSizeWidthMin = 0

export const turboTextToVideoTurboTextToVideoPostBodyVideoSizeWidthMax = 14142
export const turboTextToVideoTurboTextToVideoPostBodyGuidanceScaleMin = 0

export const turboTextToVideoTurboTextToVideoPostBodyGuidanceScaleMax = 20
export const turboTextToVideoTurboTextToVideoPostBodyNumFramesMax = 64
export const turboTextToVideoTurboTextToVideoPostBodyNumInferenceStepsMax = 8

export const turboTextToVideoTurboTextToVideoPostBody = zod.object({
  prompt: zod.string(),
  seed: zod.number().optional(),
  fps: zod.number().min(1).max(turboTextToVideoTurboTextToVideoPostBodyFpsMax).optional(),
  video_size: zod
    .object({
      height: zod
        .number()
        .min(turboTextToVideoTurboTextToVideoPostBodyVideoSizeHeightMin)
        .max(turboTextToVideoTurboTextToVideoPostBodyVideoSizeHeightMax)
        .optional(),
      width: zod
        .number()
        .min(turboTextToVideoTurboTextToVideoPostBodyVideoSizeWidthMin)
        .max(turboTextToVideoTurboTextToVideoPostBodyVideoSizeWidthMax)
        .optional(),
    })
    .or(
      zod.enum([
        'square_hd',
        'square',
        'portrait_4_3',
        'portrait_16_9',
        'landscape_4_3',
        'landscape_16_9',
      ]),
    )
    .optional(),
  guidance_scale: zod
    .number()
    .min(turboTextToVideoTurboTextToVideoPostBodyGuidanceScaleMin)
    .max(turboTextToVideoTurboTextToVideoPostBodyGuidanceScaleMax)
    .optional(),
  num_frames: zod
    .number()
    .min(1)
    .max(turboTextToVideoTurboTextToVideoPostBodyNumFramesMax)
    .optional(),
  num_inference_steps: zod
    .number()
    .min(1)
    .max(turboTextToVideoTurboTextToVideoPostBodyNumInferenceStepsMax)
    .optional(),
  negative_prompt: zod.string().optional(),
  motions: zod
    .array(zod.enum(['zoom-out', 'zoom-in', 'pan-left', 'pan-right', 'tilt-up', 'tilt-down']))
    .optional(),
})

export const turboTextToVideoTurboTextToVideoPostResponse = zod.object({
  seed: zod.number(),
  video: zod.object({
    file_size: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    url: zod.string(),
  }),
})
