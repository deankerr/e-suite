/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from 'zod'

/**
 * @summary Image To Image
 */
export const imageToImageImageToImagePostBodyNoiseStrengthMin = 0

export const imageToImageImageToImagePostBodyNoiseStrengthMax = 1
export const imageToImageImageToImagePostBodyTileHeightMin = 128

export const imageToImageImageToImagePostBodyTileHeightMax = 4096
export const imageToImageImageToImagePostBodyTileWidthMin = 128

export const imageToImageImageToImagePostBodyTileWidthMax = 4096
export const imageToImageImageToImagePostBodyIpAdapterItemScaleMin = 0
export const imageToImageImageToImagePostBodyLorasItemScaleMin = 0

export const imageToImageImageToImagePostBodyLorasItemScaleMax = 1
export const imageToImageImageToImagePostBodyGuidanceScaleMin = 0

export const imageToImageImageToImagePostBodyGuidanceScaleMax = 20
export const imageToImageImageToImagePostBodyTileStrideWidthMin = 64

export const imageToImageImageToImagePostBodyTileStrideWidthMax = 2048
export const imageToImageImageToImagePostBodyNumImagesMaxTwo = 8
export const imageToImageImageToImagePostBodyClipSkipMin = 0

export const imageToImageImageToImagePostBodyClipSkipMax = 2
export const imageToImageImageToImagePostBodyTileStrideHeightMin = 64

export const imageToImageImageToImagePostBodyTileStrideHeightMax = 2048
export const imageToImageImageToImagePostBodyControlnetsItemConditioningScaleMin = 0

export const imageToImageImageToImagePostBodyControlnetsItemConditioningScaleMax = 2
export const imageToImageImageToImagePostBodyControlnetsItemStartPercentageMin = 0

export const imageToImageImageToImagePostBodyControlnetsItemStartPercentageMax = 1
export const imageToImageImageToImagePostBodyControlnetsItemEndPercentageMin = 0

export const imageToImageImageToImagePostBodyControlnetsItemEndPercentageMax = 1
export const imageToImageImageToImagePostBodyNumInferenceStepsMinTwo = 0

export const imageToImageImageToImagePostBodyNumInferenceStepsMaxTwo = 150

export const imageToImageImageToImagePostBody = zod.object({
  prompt: zod.string(),
  noise_strength: zod
    .number()
    .min(imageToImageImageToImagePostBodyNoiseStrengthMin)
    .max(imageToImageImageToImagePostBodyNoiseStrengthMax)
    .optional(),
  tile_height: zod
    .number()
    .min(imageToImageImageToImagePostBodyTileHeightMin)
    .max(imageToImageImageToImagePostBodyTileHeightMax)
    .optional(),
  tile_width: zod
    .number()
    .min(imageToImageImageToImagePostBodyTileWidthMin)
    .max(imageToImageImageToImagePostBodyTileWidthMax)
    .optional(),
  embeddings: zod
    .array(
      zod.object({
        tokens: zod.array(zod.string()).optional(),
        path: zod.string(),
      }),
    )
    .optional(),
  model_architecture: zod.enum(['sd', 'sdxl']).optional(),
  ip_adapter: zod
    .array(
      zod.object({
        image_encoder_subpath: zod.string().optional(),
        ip_adapter_image_url: zod.string().optional(),
        path: zod.string().optional(),
        image_encoder_path: zod.string().optional(),
        model_subfolder: zod.string().optional(),
        scale: zod.number().min(imageToImageImageToImagePostBodyIpAdapterItemScaleMin).optional(),
        weight_name: zod.string().optional(),
      }),
    )
    .optional(),
  loras: zod
    .array(
      zod.object({
        path: zod.string(),
        scale: zod
          .number()
          .min(imageToImageImageToImagePostBodyLorasItemScaleMin)
          .max(imageToImageImageToImagePostBodyLorasItemScaleMax)
          .optional(),
      }),
    )
    .optional(),
  scheduler: zod
    .enum([
      'DPM++ 2M',
      'DPM++ 2M Karras',
      'DPM++ 2M SDE',
      'DPM++ 2M SDE Karras',
      'Euler',
      'Euler A',
      'LCM',
    ])
    .optional(),
  guidance_scale: zod
    .number()
    .min(imageToImageImageToImagePostBodyGuidanceScaleMin)
    .max(imageToImageImageToImagePostBodyGuidanceScaleMax)
    .optional(),
  tile_stride_width: zod
    .number()
    .min(imageToImageImageToImagePostBodyTileStrideWidthMin)
    .max(imageToImageImageToImagePostBodyTileStrideWidthMax)
    .optional(),
  enable_safety_checker: zod.boolean().optional(),
  negative_prompt: zod.string().optional(),
  image_format: zod.enum(['jpeg', 'png']).optional(),
  num_images: zod.number().min(1).max(imageToImageImageToImagePostBodyNumImagesMaxTwo).optional(),
  clip_skip: zod
    .number()
    .min(imageToImageImageToImagePostBodyClipSkipMin)
    .max(imageToImageImageToImagePostBodyClipSkipMax)
    .optional(),
  image_url: zod.string().optional(),
  model_name: zod.string(),
  tile_stride_height: zod
    .number()
    .min(imageToImageImageToImagePostBodyTileStrideHeightMin)
    .max(imageToImageImageToImagePostBodyTileStrideHeightMax)
    .optional(),
  controlnets: zod
    .array(
      zod.object({
        conditioning_scale: zod
          .number()
          .min(imageToImageImageToImagePostBodyControlnetsItemConditioningScaleMin)
          .max(imageToImageImageToImagePostBodyControlnetsItemConditioningScaleMax)
          .optional(),
        path: zod.string(),
        start_percentage: zod
          .number()
          .min(imageToImageImageToImagePostBodyControlnetsItemStartPercentageMin)
          .max(imageToImageImageToImagePostBodyControlnetsItemStartPercentageMax)
          .optional(),
        end_percentage: zod
          .number()
          .min(imageToImageImageToImagePostBodyControlnetsItemEndPercentageMin)
          .max(imageToImageImageToImagePostBodyControlnetsItemEndPercentageMax)
          .optional(),
        image_url: zod.string(),
      }),
    )
    .optional(),
  controlnet_guess_mode: zod.boolean().optional(),
  seed: zod.number().optional(),
  num_inference_steps: zod
    .number()
    .min(imageToImageImageToImagePostBodyNumInferenceStepsMinTwo)
    .max(imageToImageImageToImagePostBodyNumInferenceStepsMaxTwo)
    .optional(),
})

export const imageToImageImageToImagePostResponse = zod.object({
  images: zod.array(
    zod.object({
      file_size: zod.number().optional(),
      height: zod.number().optional(),
      file_name: zod.string().optional(),
      content_type: zod.string().optional(),
      url: zod.string(),
      width: zod.number().optional(),
    }),
  ),
  seed: zod.number(),
  has_nsfw_concepts: zod.array(zod.boolean()),
})

/**
 * @summary Text To Image
 */
export const textToImagePostBodyTileWidthMin = 128

export const textToImagePostBodyTileWidthMax = 4096
export const textToImagePostBodyImageSizeHeightMinTwo = 0

export const textToImagePostBodyImageSizeHeightMaxTwo = 14142
export const textToImagePostBodyImageSizeWidthMinTwo = 0

export const textToImagePostBodyImageSizeWidthMaxTwo = 14142
export const textToImagePostBodyTileHeightMin = 128

export const textToImagePostBodyTileHeightMax = 4096
export const textToImagePostBodyIpAdapterItemScaleMin = 0
export const textToImagePostBodyLorasItemScaleMin = 0

export const textToImagePostBodyLorasItemScaleMax = 1
export const textToImagePostBodyGuidanceScaleMin = 0

export const textToImagePostBodyGuidanceScaleMax = 20
export const textToImagePostBodyTileStrideWidthMin = 64

export const textToImagePostBodyTileStrideWidthMax = 2048
export const textToImagePostBodyNumImagesMaxTwo = 8
export const textToImagePostBodyClipSkipMin = 0

export const textToImagePostBodyClipSkipMax = 2
export const textToImagePostBodyTileStrideHeightMin = 64

export const textToImagePostBodyTileStrideHeightMax = 2048
export const textToImagePostBodyControlnetsItemConditioningScaleMin = 0

export const textToImagePostBodyControlnetsItemConditioningScaleMax = 2
export const textToImagePostBodyControlnetsItemStartPercentageMin = 0

export const textToImagePostBodyControlnetsItemStartPercentageMax = 1
export const textToImagePostBodyControlnetsItemEndPercentageMin = 0

export const textToImagePostBodyControlnetsItemEndPercentageMax = 1
export const textToImagePostBodyNumInferenceStepsMinTwo = 0

export const textToImagePostBodyNumInferenceStepsMaxTwo = 150

export const textToImagePostBody = zod.object({
  prompt: zod.string(),
  tile_width: zod
    .number()
    .min(textToImagePostBodyTileWidthMin)
    .max(textToImagePostBodyTileWidthMax)
    .optional(),
  image_size: zod
    .object({
      height: zod
        .number()
        .min(textToImagePostBodyImageSizeHeightMinTwo)
        .max(textToImagePostBodyImageSizeHeightMaxTwo)
        .optional(),
      width: zod
        .number()
        .min(textToImagePostBodyImageSizeWidthMinTwo)
        .max(textToImagePostBodyImageSizeWidthMaxTwo)
        .optional(),
    })
    .or(
      zod.enum([
        'square_hd',
        'square',
        'portrait_4_3',
        'portrait_16_9',
        'landscape_4_3',
        'landscape_16_9',
      ]),
    )
    .optional(),
  tile_height: zod
    .number()
    .min(textToImagePostBodyTileHeightMin)
    .max(textToImagePostBodyTileHeightMax)
    .optional(),
  embeddings: zod
    .array(
      zod.object({
        tokens: zod.array(zod.string()).optional(),
        path: zod.string(),
      }),
    )
    .optional(),
  model_architecture: zod.enum(['sd', 'sdxl']).optional(),
  ip_adapter: zod
    .array(
      zod.object({
        image_encoder_subpath: zod.string().optional(),
        ip_adapter_image_url: zod.string().optional(),
        path: zod.string().optional(),
        image_encoder_path: zod.string().optional(),
        model_subfolder: zod.string().optional(),
        scale: zod.number().min(textToImagePostBodyIpAdapterItemScaleMin).optional(),
        weight_name: zod.string().optional(),
      }),
    )
    .optional(),
  loras: zod
    .array(
      zod.object({
        path: zod.string(),
        scale: zod
          .number()
          .min(textToImagePostBodyLorasItemScaleMin)
          .max(textToImagePostBodyLorasItemScaleMax)
          .optional(),
      }),
    )
    .optional(),
  scheduler: zod
    .enum([
      'DPM++ 2M',
      'DPM++ 2M Karras',
      'DPM++ 2M SDE',
      'DPM++ 2M SDE Karras',
      'Euler',
      'Euler A',
      'LCM',
    ])
    .optional(),
  guidance_scale: zod
    .number()
    .min(textToImagePostBodyGuidanceScaleMin)
    .max(textToImagePostBodyGuidanceScaleMax)
    .optional(),
  tile_stride_width: zod
    .number()
    .min(textToImagePostBodyTileStrideWidthMin)
    .max(textToImagePostBodyTileStrideWidthMax)
    .optional(),
  enable_safety_checker: zod.boolean().optional(),
  negative_prompt: zod.string().optional(),
  image_format: zod.enum(['jpeg', 'png']).optional(),
  num_images: zod.number().min(1).max(textToImagePostBodyNumImagesMaxTwo).optional(),
  clip_skip: zod
    .number()
    .min(textToImagePostBodyClipSkipMin)
    .max(textToImagePostBodyClipSkipMax)
    .optional(),
  model_name: zod.string(),
  tile_stride_height: zod
    .number()
    .min(textToImagePostBodyTileStrideHeightMin)
    .max(textToImagePostBodyTileStrideHeightMax)
    .optional(),
  controlnets: zod
    .array(
      zod.object({
        conditioning_scale: zod
          .number()
          .min(textToImagePostBodyControlnetsItemConditioningScaleMin)
          .max(textToImagePostBodyControlnetsItemConditioningScaleMax)
          .optional(),
        path: zod.string(),
        start_percentage: zod
          .number()
          .min(textToImagePostBodyControlnetsItemStartPercentageMin)
          .max(textToImagePostBodyControlnetsItemStartPercentageMax)
          .optional(),
        end_percentage: zod
          .number()
          .min(textToImagePostBodyControlnetsItemEndPercentageMin)
          .max(textToImagePostBodyControlnetsItemEndPercentageMax)
          .optional(),
        image_url: zod.string(),
      }),
    )
    .optional(),
  controlnet_guess_mode: zod.boolean().optional(),
  seed: zod.number().optional(),
  num_inference_steps: zod
    .number()
    .min(textToImagePostBodyNumInferenceStepsMinTwo)
    .max(textToImagePostBodyNumInferenceStepsMaxTwo)
    .optional(),
})

export const textToImagePostResponse = zod.object({
  images: zod.array(
    zod.object({
      file_size: zod.number().optional(),
      height: zod.number().optional(),
      file_name: zod.string().optional(),
      content_type: zod.string().optional(),
      url: zod.string(),
      width: zod.number().optional(),
    }),
  ),
  seed: zod.number(),
  has_nsfw_concepts: zod.array(zod.boolean()),
})

/**
 * @summary Health
 */
export const healthHealthPostResponse = zod.any()
