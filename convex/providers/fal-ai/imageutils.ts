/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from 'zod'

/**
 * @summary Depth Estimation
 */
export const depthEstimationDepthPostBody = zod.object({
  bg_th: zod.number().optional(),
  a: zod.number().optional(),
  depth_and_normal: zod.boolean().optional(),
  image_url: zod.string(),
})

export const depthEstimationDepthPostResponse = zod.object({
  image: zod.object({
    file_size: zod.number().optional(),
    height: zod.number().optional(),
    url: zod.string(),
    width: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    file_data: zod.string().optional(),
  }),
})

/**
 * @summary Nsfw
 */
export const nsfwNsfwPostBody = zod.object({
  image_url: zod.string(),
})

export const nsfwNsfwPostResponse = zod.object({
  nsfw_probability: zod.number(),
})

/**
 * @summary Sam
 */
export const samSamPostBodyPointPromptItemMin = 2

export const samSamPostBodyPointPromptItemMax = 2
export const samSamPostBodyBoxPromptItemMin = 4

export const samSamPostBodyBoxPromptItemMax = 4

export const samSamPostBody = zod.object({
  invert: zod.boolean().optional(),
  point_prompt: zod
    .array(
      zod
        .array(zod.any())
        .min(samSamPostBodyPointPromptItemMin)
        .max(samSamPostBodyPointPromptItemMax),
    )
    .optional(),
  point_label: zod.array(zod.number()).optional(),
  size: zod.number().optional(),
  box_prompt: zod
    .array(
      zod.array(zod.any()).min(samSamPostBodyBoxPromptItemMin).max(samSamPostBodyBoxPromptItemMax),
    )
    .optional(),
  with_contours: zod.boolean().optional(),
  retina: zod.boolean().optional(),
  image_url: zod.string(),
  black_white: zod.boolean().optional(),
  better_quality: zod.boolean().optional(),
  iou: zod.number().optional(),
  confidence: zod.number().optional(),
  text_prompt: zod.string().optional(),
})

export const samSamPostResponse = zod.object({
  image: zod
    .object({
      file_size: zod.number().optional(),
      height: zod.number().optional(),
      url: zod.string(),
      width: zod.number().optional(),
      file_name: zod.string().optional(),
      content_type: zod.string().optional(),
      file_data: zod.string().optional(),
    })
    .optional(),
})

/**
 * @summary Upscale Esrgan
 */
export const upscaleEsrganEsrganPostBody = zod.object({
  model: zod
    .enum([
      'RealESRGAN_x4plus',
      'RealESRGAN_x2plus',
      'RealESRGAN_x4plus_anime_6B',
      'RealESRGAN_x4_v3',
      'RealESRGAN_x4_wdn_v3',
      'RealESRGAN_x4_anime_v3',
    ])
    .optional(),
  face: zod.boolean().optional(),
  scale: zod.number().optional(),
  tile: zod.number().optional(),
  image_url: zod.string(),
})

export const upscaleEsrganEsrganPostResponse = zod.object({
  image: zod.object({
    file_size: zod.number().optional(),
    height: zod.number().optional(),
    url: zod.string(),
    width: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    file_data: zod.string().optional(),
  }),
})

/**
 * @summary Rembg
 */
export const rembgRembgPostBody = zod.object({
  sync_mode: zod.boolean().optional(),
  crop_to_bbox: zod.boolean().optional(),
  image_url: zod.string(),
})

export const rembgRembgPostResponse = zod.object({
  image: zod.object({
    file_size: zod.number().optional(),
    height: zod.number().optional(),
    url: zod.string(),
    width: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    file_data: zod.string().optional(),
  }),
})

/**
 * @summary Marigold Depth Estimation
 */
export const marigoldDepthEstimationMarigoldDepthPostBodyEnsembleSizeMin = 2

export const marigoldDepthEstimationMarigoldDepthPostBodyEnsembleSizeMax = 50
export const marigoldDepthEstimationMarigoldDepthPostBodyNumInferenceStepsMin = 2

export const marigoldDepthEstimationMarigoldDepthPostBodyNumInferenceStepsMax = 50
export const marigoldDepthEstimationMarigoldDepthPostBodyProcessingResMin = 0

export const marigoldDepthEstimationMarigoldDepthPostBodyProcessingResMax = 2048

export const marigoldDepthEstimationMarigoldDepthPostBody = zod.object({
  ensemble_size: zod
    .number()
    .min(marigoldDepthEstimationMarigoldDepthPostBodyEnsembleSizeMin)
    .max(marigoldDepthEstimationMarigoldDepthPostBodyEnsembleSizeMax)
    .optional(),
  num_inference_steps: zod
    .number()
    .min(marigoldDepthEstimationMarigoldDepthPostBodyNumInferenceStepsMin)
    .max(marigoldDepthEstimationMarigoldDepthPostBodyNumInferenceStepsMax)
    .optional(),
  processing_res: zod
    .number()
    .min(marigoldDepthEstimationMarigoldDepthPostBodyProcessingResMin)
    .max(marigoldDepthEstimationMarigoldDepthPostBodyProcessingResMax)
    .optional(),
  image_url: zod.string(),
})

export const marigoldDepthEstimationMarigoldDepthPostResponse = zod.object({
  image: zod.object({
    file_size: zod.number().optional(),
    height: zod.number().optional(),
    url: zod.string(),
    width: zod.number().optional(),
    file_name: zod.string().optional(),
    content_type: zod.string().optional(),
    file_data: zod.string().optional(),
  }),
})
