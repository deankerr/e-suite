/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import { z as zod } from 'zod'

/**
 * @summary Image To Image
 */
export const imageToImageImageToImagePostBodyNumImagesMax = 8
export const imageToImageImageToImagePostBodyImageSizeHeightMin = 0

export const imageToImageImageToImagePostBodyImageSizeHeightMax = 14142
export const imageToImageImageToImagePostBodyImageSizeWidthMin = 0

export const imageToImageImageToImagePostBodyImageSizeWidthMax = 14142
export const imageToImageImageToImagePostBodyStrengthMin = 0.05

export const imageToImageImageToImagePostBodyStrengthMax = 1

export const imageToImageImageToImagePostBody = zod.object({
  prompt: zod.string(),
  num_images: zod.number().min(1).max(imageToImageImageToImagePostBodyNumImagesMax).optional(),
  image_size: zod
    .object({
      height: zod
        .number()
        .min(imageToImageImageToImagePostBodyImageSizeHeightMin)
        .max(imageToImageImageToImagePostBodyImageSizeHeightMax)
        .optional(),
      width: zod
        .number()
        .min(imageToImageImageToImagePostBodyImageSizeWidthMin)
        .max(imageToImageImageToImagePostBodyImageSizeWidthMax)
        .optional(),
    })
    .or(
      zod.enum([
        'square_hd',
        'square',
        'portrait_4_3',
        'portrait_16_9',
        'landscape_4_3',
        'landscape_16_9',
      ]),
    )
    .optional(),
  format: zod.enum(['jpeg', 'png']).optional(),
  embeddings: zod
    .array(
      zod.object({
        tokens: zod.array(zod.string()).optional(),
        path: zod.string(),
      }),
    )
    .optional(),
  expand_prompt: zod.boolean().optional(),
  image_url: zod.string(),
  strength: zod
    .number()
    .min(imageToImageImageToImagePostBodyStrengthMin)
    .max(imageToImageImageToImagePostBodyStrengthMax)
    .optional(),
  sync_mode: zod.boolean().optional(),
  enable_safety_checker: zod.boolean().optional(),
  num_inference_steps: zod.enum(['1', '2', '4']).optional(),
  seed: zod.number().optional(),
})

export const imageToImageImageToImagePostResponse = zod.object({
  prompt: zod.string(),
  images: zod.array(
    zod.object({
      height: zod.number(),
      content_type: zod.string().optional(),
      url: zod.string(),
      width: zod.number(),
    }),
  ),
  timings: zod.record(zod.string(), zod.number()),
  has_nsfw_concepts: zod.array(zod.boolean()),
  seed: zod.number(),
})

/**
 * @summary Inpainting
 */
export const inpaintingInpaintingPostBodyNumImagesMax = 8
export const inpaintingInpaintingPostBodyImageSizeHeightMin = 0

export const inpaintingInpaintingPostBodyImageSizeHeightMax = 14142
export const inpaintingInpaintingPostBodyImageSizeWidthMin = 0

export const inpaintingInpaintingPostBodyImageSizeWidthMax = 14142
export const inpaintingInpaintingPostBodyStrengthMin = 0.01

export const inpaintingInpaintingPostBodyStrengthMax = 1

export const inpaintingInpaintingPostBody = zod.object({
  prompt: zod.string(),
  num_images: zod.number().min(1).max(inpaintingInpaintingPostBodyNumImagesMax).optional(),
  image_size: zod
    .object({
      height: zod
        .number()
        .min(inpaintingInpaintingPostBodyImageSizeHeightMin)
        .max(inpaintingInpaintingPostBodyImageSizeHeightMax)
        .optional(),
      width: zod
        .number()
        .min(inpaintingInpaintingPostBodyImageSizeWidthMin)
        .max(inpaintingInpaintingPostBodyImageSizeWidthMax)
        .optional(),
    })
    .or(
      zod.enum([
        'square_hd',
        'square',
        'portrait_4_3',
        'portrait_16_9',
        'landscape_4_3',
        'landscape_16_9',
      ]),
    )
    .optional(),
  format: zod.enum(['jpeg', 'png']).optional(),
  embeddings: zod
    .array(
      zod.object({
        tokens: zod.array(zod.string()).optional(),
        path: zod.string(),
      }),
    )
    .optional(),
  expand_prompt: zod.boolean().optional(),
  image_url: zod.string(),
  strength: zod
    .number()
    .min(inpaintingInpaintingPostBodyStrengthMin)
    .max(inpaintingInpaintingPostBodyStrengthMax)
    .optional(),
  sync_mode: zod.boolean().optional(),
  enable_safety_checker: zod.boolean().optional(),
  num_inference_steps: zod.enum(['1', '2', '4']).optional(),
  mask_url: zod.string(),
  seed: zod.number().optional(),
})

export const inpaintingInpaintingPostResponse = zod.object({
  prompt: zod.string(),
  images: zod.array(
    zod.object({
      height: zod.number(),
      content_type: zod.string().optional(),
      url: zod.string(),
      width: zod.number(),
    }),
  ),
  timings: zod.record(zod.string(), zod.number()),
  has_nsfw_concepts: zod.array(zod.boolean()),
  seed: zod.number(),
})

/**
 * @summary Text To Image
 */
export const textToImagePostBodyNumImagesMax = 8
export const textToImagePostBodyImageSizeHeightMin = 0

export const textToImagePostBodyImageSizeHeightMax = 14142
export const textToImagePostBodyImageSizeWidthMin = 0

export const textToImagePostBodyImageSizeWidthMax = 14142

export const textToImagePostBody = zod.object({
  prompt: zod.string(),
  num_images: zod.number().min(1).max(textToImagePostBodyNumImagesMax).optional(),
  image_size: zod
    .object({
      height: zod
        .number()
        .min(textToImagePostBodyImageSizeHeightMin)
        .max(textToImagePostBodyImageSizeHeightMax)
        .optional(),
      width: zod
        .number()
        .min(textToImagePostBodyImageSizeWidthMin)
        .max(textToImagePostBodyImageSizeWidthMax)
        .optional(),
    })
    .or(
      zod.enum([
        'square_hd',
        'square',
        'portrait_4_3',
        'portrait_16_9',
        'landscape_4_3',
        'landscape_16_9',
      ]),
    )
    .optional(),
  format: zod.enum(['jpeg', 'png']).optional(),
  embeddings: zod
    .array(
      zod.object({
        tokens: zod.array(zod.string()).optional(),
        path: zod.string(),
      }),
    )
    .optional(),
  expand_prompt: zod.boolean().optional(),
  sync_mode: zod.boolean().optional(),
  enable_safety_checker: zod.boolean().optional(),
  num_inference_steps: zod.enum(['1', '2', '4']).optional(),
  seed: zod.number().optional(),
})

export const textToImagePostResponse = zod.object({
  prompt: zod.string(),
  images: zod.array(
    zod.object({
      height: zod.number(),
      content_type: zod.string().optional(),
      url: zod.string(),
      width: zod.number(),
    }),
  ),
  timings: zod.record(zod.string(), zod.number()),
  has_nsfw_concepts: zod.array(zod.boolean()),
  seed: zod.number(),
})
